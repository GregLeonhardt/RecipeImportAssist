/*******************************  COPYRIGHT  ********************************/
/*
 *  Copyright (c) 2017 Gregory N. Leonhardt All rights reserved.
 *
 ****************************************************************************/

#ifndef DECODE_API_H
#define DECODE_API_H

/******************************** JAVADOC ***********************************/
/**
 *  This file contains public definitions (etc.) that apply to external 
 *  library components of the 'decode' library.
 *
 *  @note
 *
 ****************************************************************************/

/****************************************************************************
 *  Compiler directives
 ****************************************************************************/


/****************************************************************************
 * System APIs
 ****************************************************************************/

                                //*******************************************
                                //*******************************************

/****************************************************************************
 * Application APIs
 ****************************************************************************/

                                //*******************************************
#include <libtools_api.h>       //  My Tools Library
                                //*******************************************
#include <decode_api.h>         //  API for all decode_*            PUBLIC
#include <email_api.h>          //  API for all email_*             PUBLIC
                                //*******************************************
#include <recipe_api.h>         //  API for all recipe_*            PUBLIC
                                //*******************************************

/****************************************************************************
 * Library Public Definitions
 ****************************************************************************/

//----------------------------------------------------------------------------
//----------------------------------------------------------------------------

/****************************************************************************
 * Library Public Enumerations
 ****************************************************************************/

//----------------------------------------------------------------------------
//----------------------------------------------------------------------------

/****************************************************************************
 * Library Public Structures
 ****************************************************************************/

//----------------------------------------------------------------------------
struct  source_info_t
{
    //------------------------------------------------------------------------
    /**
     *  @param  e_source        Group-From                                  */
    char                            g_from[      FROM_L      + 1 ];
    /**
     *  @param  e_subject       Group_Subject                               */
    char                            g_subject[   SUBJECT_L   + 1 ];
    /**
     *  @param  e_datetime      Group sent Date/Time                        */
    char                            g_datetime[  DATETIME_L  + 1 ];
    //------------------------------------------------------------------------
    /**
     *  @param  e_from          Who posted the e-Mail message               */
    char                            e_from[      FROM_L      + 1 ];
    /**
     *  @param  e_subject       Subject of the original e-Mail              */
    char                            e_subject[   SUBJECT_L   + 1 ];
    /**
     *  @param  e_datetime      When the e-Mail was originally posted       */
    char                            e_datetime[  DATETIME_L  + 1 ];
    //------------------------------------------------------------------------
    /**
     *  @param  f_dir_name      Directory the file was when it was decoded  */
    char                            f_dir_name[  FILE_NAME_L + 1 ];
    /**
     *  @param  e_file_name     The file name that was decoded              */
    char                            f_file_name[ FILE_NAME_L + 1 ];
    /**
     *  @param  f_date_time     Date & Time stamp of the file               */
    char                            f_date_time[ FILE_DATE_L + 1 ];
    /**
     *  @param  f_size          Size of the file that was decoded           */
    char                            f_file_size[ FILE_SIZE_L + 1 ];
};
//----------------------------------------------------------------------------

/****************************************************************************
 * Library Public Storage Allocation
 ****************************************************************************/

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------

/****************************************************************************
 * Library Public Prototypes
 ****************************************************************************/

//---------------------------------------------------------------------------
char    *
decode_is_tag(
    char                        *   data_p,
    char                        *   tag_p
    );
//---------------------------------------------------------------------------
void
decode_save_chapter(
    char                        *   data_p,
    struct   recipe_t           *   recipe_p
    );
//---------------------------------------------------------------------------
void
decode_copy_info_to_recipe(
    struct  recipe_t            *   recipe_p,
    struct  source_info_t       *   source_info_p
    );
//---------------------------------------------------------------------------
int
decode_end_of_recipe(
    enum    recipe_format_e         recipe_format,
    char                        *   data_p
    );
//---------------------------------------------------------------------------
void
decode_xxx(
    enum    recipe_format_e         recipe_format,
    struct  list_base_t         *   level3_list_p,
    struct  source_info_t       *   source_info_p
    );
//---------------------------------------------------------------------------
void
decode_thread(
    void                        *   not_used
    );
//---------------------------------------------------------------------------
void
decode_finalize(
    struct   recipe_t           *   recipe_p
    );
//---------------------------------------------------------------------------

/****************************************************************************/

#endif                      //    DECODE_API_H
